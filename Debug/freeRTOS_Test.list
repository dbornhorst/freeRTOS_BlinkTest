
freeRTOS_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080033c8  080033c8  000133c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b8  080034b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080034b8  080034b8  000134b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c0  080034c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080034c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001484  20000074  0800353c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f8  0800353c  000214f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c01  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b3  00000000  00000000  00030c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020797  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eda8  00000000  00000000  000556c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf78c  00000000  00000000  0006446f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  00123c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000074 	.word	0x20000074
 800020c:	00000000 	.word	0x00000000
 8000210:	080033b0 	.word	0x080033b0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000078 	.word	0x20000078
 800022c:	080033b0 	.word	0x080033b0

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	468e      	mov	lr, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	f040 8083 	bne.w	8000378 <__udivmoddi4+0x118>
 8000272:	428a      	cmp	r2, r1
 8000274:	4617      	mov	r7, r2
 8000276:	d947      	bls.n	8000308 <__udivmoddi4+0xa8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b14b      	cbz	r3, 8000292 <__udivmoddi4+0x32>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	fa05 fe03 	lsl.w	lr, r5, r3
 8000286:	fa20 f101 	lsr.w	r1, r0, r1
 800028a:	409f      	lsls	r7, r3
 800028c:	ea41 0e0e 	orr.w	lr, r1, lr
 8000290:	409c      	lsls	r4, r3
 8000292:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000296:	fbbe fcf8 	udiv	ip, lr, r8
 800029a:	fa1f f987 	uxth.w	r9, r7
 800029e:	fb08 e21c 	mls	r2, r8, ip, lr
 80002a2:	fb0c f009 	mul.w	r0, ip, r9
 80002a6:	0c21      	lsrs	r1, r4, #16
 80002a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	18ba      	adds	r2, r7, r2
 80002b2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80002b6:	f080 8118 	bcs.w	80004ea <__udivmoddi4+0x28a>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f240 8115 	bls.w	80004ea <__udivmoddi4+0x28a>
 80002c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80002c4:	443a      	add	r2, r7
 80002c6:	1a12      	subs	r2, r2, r0
 80002c8:	fbb2 f0f8 	udiv	r0, r2, r8
 80002cc:	fb08 2210 	mls	r2, r8, r0, r2
 80002d0:	fb00 f109 	mul.w	r1, r0, r9
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	42a1      	cmp	r1, r4
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002de:	193c      	adds	r4, r7, r4
 80002e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e4:	f080 8103 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002e8:	42a1      	cmp	r1, r4
 80002ea:	f240 8100 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002ee:	3802      	subs	r0, #2
 80002f0:	443c      	add	r4, r7
 80002f2:	1a64      	subs	r4, r4, r1
 80002f4:	2100      	movs	r1, #0
 80002f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa4>
 80002fc:	2200      	movs	r2, #0
 80002fe:	40dc      	lsrs	r4, r3
 8000300:	e9c6 4200 	strd	r4, r2, [r6]
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xac>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f382 	clz	r3, r2
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14f      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000314:	1a8d      	subs	r5, r1, r2
 8000316:	2101      	movs	r1, #1
 8000318:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800031c:	fa1f f882 	uxth.w	r8, r2
 8000320:	fbb5 fcfe 	udiv	ip, r5, lr
 8000324:	fb0e 551c 	mls	r5, lr, ip, r5
 8000328:	fb08 f00c 	mul.w	r0, r8, ip
 800032c:	0c22      	lsrs	r2, r4, #16
 800032e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000332:	42a8      	cmp	r0, r5
 8000334:	d907      	bls.n	8000346 <__udivmoddi4+0xe6>
 8000336:	197d      	adds	r5, r7, r5
 8000338:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0xe4>
 800033e:	42a8      	cmp	r0, r5
 8000340:	f200 80e9 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 8000344:	4694      	mov	ip, r2
 8000346:	1a2d      	subs	r5, r5, r0
 8000348:	fbb5 f0fe 	udiv	r0, r5, lr
 800034c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035a:	45a0      	cmp	r8, r4
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x10e>
 800035e:	193c      	adds	r4, r7, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x10c>
 8000366:	45a0      	cmp	r8, r4
 8000368:	f200 80d9 	bhi.w	800051e <__udivmoddi4+0x2be>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 0408 	sub.w	r4, r4, r8
 8000372:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000376:	e7c0      	b.n	80002fa <__udivmoddi4+0x9a>
 8000378:	428b      	cmp	r3, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x12e>
 800037c:	2e00      	cmp	r6, #0
 800037e:	f000 80b1 	beq.w	80004e4 <__udivmoddi4+0x284>
 8000382:	2100      	movs	r1, #0
 8000384:	e9c6 0500 	strd	r0, r5, [r6]
 8000388:	4608      	mov	r0, r1
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d14b      	bne.n	800042e <__udivmoddi4+0x1ce>
 8000396:	42ab      	cmp	r3, r5
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b9 	bhi.w	8000512 <__udivmoddi4+0x2b2>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb65 0303 	sbc.w	r3, r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	469e      	mov	lr, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0aa      	beq.n	8000304 <__udivmoddi4+0xa4>
 80003ae:	e9c6 4e00 	strd	r4, lr, [r6]
 80003b2:	e7a7      	b.n	8000304 <__udivmoddi4+0xa4>
 80003b4:	409f      	lsls	r7, r3
 80003b6:	f1c3 0220 	rsb	r2, r3, #32
 80003ba:	40d1      	lsrs	r1, r2
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c4:	fa1f f887 	uxth.w	r8, r7
 80003c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80003cc:	fa24 f202 	lsr.w	r2, r4, r2
 80003d0:	409d      	lsls	r5, r3
 80003d2:	fb00 fc08 	mul.w	ip, r0, r8
 80003d6:	432a      	orrs	r2, r5
 80003d8:	0c15      	lsrs	r5, r2, #16
 80003da:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003de:	45ac      	cmp	ip, r5
 80003e0:	fa04 f403 	lsl.w	r4, r4, r3
 80003e4:	d909      	bls.n	80003fa <__udivmoddi4+0x19a>
 80003e6:	197d      	adds	r5, r7, r5
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	f080 808f 	bcs.w	800050e <__udivmoddi4+0x2ae>
 80003f0:	45ac      	cmp	ip, r5
 80003f2:	f240 808c 	bls.w	800050e <__udivmoddi4+0x2ae>
 80003f6:	3802      	subs	r0, #2
 80003f8:	443d      	add	r5, r7
 80003fa:	eba5 050c 	sub.w	r5, r5, ip
 80003fe:	fbb5 f1fe 	udiv	r1, r5, lr
 8000402:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000406:	fb01 f908 	mul.w	r9, r1, r8
 800040a:	b295      	uxth	r5, r2
 800040c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000410:	45a9      	cmp	r9, r5
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800041a:	d274      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 800041c:	45a9      	cmp	r9, r5
 800041e:	d972      	bls.n	8000506 <__udivmoddi4+0x2a6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	eba5 0509 	sub.w	r5, r5, r9
 8000428:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800042c:	e778      	b.n	8000320 <__udivmoddi4+0xc0>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	408b      	lsls	r3, r1
 8000434:	fa22 fc07 	lsr.w	ip, r2, r7
 8000438:	ea4c 0c03 	orr.w	ip, ip, r3
 800043c:	fa25 f407 	lsr.w	r4, r5, r7
 8000440:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000444:	fbb4 f9fe 	udiv	r9, r4, lr
 8000448:	fa1f f88c 	uxth.w	r8, ip
 800044c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000450:	fa20 f307 	lsr.w	r3, r0, r7
 8000454:	fb09 fa08 	mul.w	sl, r9, r8
 8000458:	408d      	lsls	r5, r1
 800045a:	431d      	orrs	r5, r3
 800045c:	0c2b      	lsrs	r3, r5, #16
 800045e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000462:	45a2      	cmp	sl, r4
 8000464:	fa02 f201 	lsl.w	r2, r2, r1
 8000468:	fa00 f301 	lsl.w	r3, r0, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0x222>
 800046e:	eb1c 0404 	adds.w	r4, ip, r4
 8000472:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000476:	d248      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000478:	45a2      	cmp	sl, r4
 800047a:	d946      	bls.n	800050a <__udivmoddi4+0x2aa>
 800047c:	f1a9 0902 	sub.w	r9, r9, #2
 8000480:	4464      	add	r4, ip
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	fbb4 f0fe 	udiv	r0, r4, lr
 800048a:	fb0e 4410 	mls	r4, lr, r0, r4
 800048e:	fb00 fa08 	mul.w	sl, r0, r8
 8000492:	b2ad      	uxth	r5, r5
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	45a2      	cmp	sl, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x24e>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004a4:	d22d      	bcs.n	8000502 <__udivmoddi4+0x2a2>
 80004a6:	45a2      	cmp	sl, r4
 80004a8:	d92b      	bls.n	8000502 <__udivmoddi4+0x2a2>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	eba4 040a 	sub.w	r4, r4, sl
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d319      	bcc.n	80004f6 <__udivmoddi4+0x296>
 80004c2:	d016      	beq.n	80004f2 <__udivmoddi4+0x292>
 80004c4:	b15e      	cbz	r6, 80004de <__udivmoddi4+0x27e>
 80004c6:	ebb3 020e 	subs.w	r2, r3, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431f      	orrs	r7, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c6 7400 	strd	r7, r4, [r6]
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	4631      	mov	r1, r6
 80004e6:	4630      	mov	r0, r6
 80004e8:	e70c      	b.n	8000304 <__udivmoddi4+0xa4>
 80004ea:	468c      	mov	ip, r1
 80004ec:	e6eb      	b.n	80002c6 <__udivmoddi4+0x66>
 80004ee:	4610      	mov	r0, r2
 80004f0:	e6ff      	b.n	80002f2 <__udivmoddi4+0x92>
 80004f2:	4543      	cmp	r3, r8
 80004f4:	d2e6      	bcs.n	80004c4 <__udivmoddi4+0x264>
 80004f6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004fa:	eb69 050c 	sbc.w	r5, r9, ip
 80004fe:	3801      	subs	r0, #1
 8000500:	e7e0      	b.n	80004c4 <__udivmoddi4+0x264>
 8000502:	4628      	mov	r0, r5
 8000504:	e7d3      	b.n	80004ae <__udivmoddi4+0x24e>
 8000506:	4611      	mov	r1, r2
 8000508:	e78c      	b.n	8000424 <__udivmoddi4+0x1c4>
 800050a:	4681      	mov	r9, r0
 800050c:	e7b9      	b.n	8000482 <__udivmoddi4+0x222>
 800050e:	4608      	mov	r0, r1
 8000510:	e773      	b.n	80003fa <__udivmoddi4+0x19a>
 8000512:	4608      	mov	r0, r1
 8000514:	e749      	b.n	80003aa <__udivmoddi4+0x14a>
 8000516:	f1ac 0c02 	sub.w	ip, ip, #2
 800051a:	443d      	add	r5, r7
 800051c:	e713      	b.n	8000346 <__udivmoddi4+0xe6>
 800051e:	3802      	subs	r0, #2
 8000520:	443c      	add	r4, r7
 8000522:	e724      	b.n	800036e <__udivmoddi4+0x10e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x28>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	20000090 	.word	0x20000090
 8000554:	20000144 	.word	0x20000144

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b08e      	sub	sp, #56	; 0x38
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f000 f9e5 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f831 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 f871 	bl	800064c <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <main+0x60>)
 800056c:	f107 041c 	add.w	r4, r7, #28
 8000570:	461d      	mov	r5, r3
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800057a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fc51 	bl	8001e2c <osThreadCreate>
 800058a:	4603      	mov	r3, r0
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <main+0x64>)
 800058e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  //osThreadDef(Task2, Task2_init, osPriorityBelowNormal,0, 128);
  //Task2Handle = osThreadCreate(osThread(Task2), NULL);

  osThreadDef(TaskButton, TaskButton_init, osPriorityNormal,0, 128);
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <main+0x68>)
 8000592:	463c      	mov	r4, r7
 8000594:	461d      	mov	r5, r3
 8000596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000598:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskButtonHandle = osThreadCreate(osThread(TaskButton), NULL);
 80005a2:	463b      	mov	r3, r7
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fc40 	bl	8001e2c <osThreadCreate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <main+0x6c>)
 80005b0:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b2:	f001 fc34 	bl	8001e1e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x5e>
 80005b8:	080033e0 	.word	0x080033e0
 80005bc:	20001494 	.word	0x20001494
 80005c0:	080033fc 	.word	0x080033fc
 80005c4:	20001498 	.word	0x20001498

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 fe20 	bl	800321c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ea:	2302      	movs	r3, #2
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f6:	2300      	movs	r3, #0
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005fa:	2300      	movs	r3, #0
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fc70 	bl	8000ee8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800060e:	f000 f8b1 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f000 ff72 	bl	8001514 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000636:	f000 f89d 	bl	8000774 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800063a:	4b03      	ldr	r3, [pc, #12]	; (8000648 <SystemClock_Config+0x80>)
 800063c:	2201      	movs	r2, #1
 800063e:	601a      	str	r2, [r3, #0]
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	; 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	42420070 	.word	0x42420070

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <MX_GPIO_Init+0xa4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xa4>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <MX_GPIO_Init+0xa4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <MX_GPIO_Init+0xa4>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xa4>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_GPIO_Init+0xa4>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0310 	and.w	r3, r3, #16
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_GPIO_Init+0xa4>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a16      	ldr	r2, [pc, #88]	; (80006f0 <MX_GPIO_Init+0xa4>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_GPIO_Init+0xa4>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STAT1_Pin|STAT2_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	21c0      	movs	r1, #192	; 0xc0
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006ae:	f000 fbea 	bl	8000e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FREAK_Pin */
  GPIO_InitStruct.Pin = FREAK_Pin;
 80006b2:	2301      	movs	r3, #1
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FREAK_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <MX_GPIO_Init+0xac>)
 80006c6:	f000 fa43 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin;
 80006ca:	23c0      	movs	r3, #192	; 0xc0
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 0310 	add.w	r3, r7, #16
 80006de:	4619      	mov	r1, r3
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_GPIO_Init+0xa8>)
 80006e2:	f000 fa35 	bl	8000b50 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40011000 	.word	0x40011000
 80006f8:	40010800 	.word	0x40010800

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOC, STAT1_Pin|STAT2_Pin);
 8000704:	21c0      	movs	r1, #192	; 0xc0
 8000706:	4803      	ldr	r0, [pc, #12]	; (8000714 <StartDefaultTask+0x18>)
 8000708:	f000 fbd5 	bl	8000eb6 <HAL_GPIO_TogglePin>
		//HAL_Delay(250);
		//osDelay(250);
		vTaskDelay(250 / portTICK_PERIOD_MS);
 800070c:	20fa      	movs	r0, #250	; 0xfa
 800070e:	f001 fe29 	bl	8002364 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOC, STAT1_Pin|STAT2_Pin);
 8000712:	e7f7      	b.n	8000704 <StartDefaultTask+0x8>
 8000714:	40011000 	.word	0x40011000

08000718 <TaskButton_init>:
	}
}


void TaskButton_init(void const * argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	GPIO_PinState currentState;

	while(1)
	{
		currentState = HAL_GPIO_ReadPin(GPIOA, FREAK_Pin);
 8000720:	2101      	movs	r1, #1
 8000722:	4809      	ldr	r0, [pc, #36]	; (8000748 <TaskButton_init+0x30>)
 8000724:	f000 fb98 	bl	8000e58 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]

		if (currentState == GPIO_PIN_SET)
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <TaskButton_init+0x28>
		{
			HAL_GPIO_TogglePin(GPIOC, STAT1_Pin|STAT2_Pin);
 8000732:	21c0      	movs	r1, #192	; 0xc0
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <TaskButton_init+0x34>)
 8000736:	f000 fbbe 	bl	8000eb6 <HAL_GPIO_TogglePin>
			//HAL_Delay(100);
			//osDelay(100);
			vTaskDelay(30 / portTICK_PERIOD_MS);
 800073a:	201e      	movs	r0, #30
 800073c:	f001 fe12 	bl	8002364 <vTaskDelay>
		}
		vTaskDelay(10 / portTICK_PERIOD_MS);
 8000740:	200a      	movs	r0, #10
 8000742:	f001 fe0f 	bl	8002364 <vTaskDelay>
		currentState = HAL_GPIO_ReadPin(GPIOA, FREAK_Pin);
 8000746:	e7eb      	b.n	8000720 <TaskButton_init+0x8>
 8000748:	40010800 	.word	0x40010800
 800074c:	40011000 	.word	0x40011000

08000750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d101      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000762:	f000 f8f9 	bl	8000958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40012c00 	.word	0x40012c00

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <HAL_MspInit+0x60>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <HAL_MspInit+0x60>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <HAL_MspInit+0x60>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <HAL_MspInit+0x60>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <HAL_MspInit+0x60>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <HAL_MspInit+0x60>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	210f      	movs	r1, #15
 80007ba:	f06f 0001 	mvn.w	r0, #1
 80007be:	f000 f99c 	bl	8000afa <HAL_NVIC_SetPriority>

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_MspInit+0x64>)
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_MspInit+0x64>)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010000 	.word	0x40010000

080007e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	6879      	ldr	r1, [r7, #4]
 80007fc:	2019      	movs	r0, #25
 80007fe:	f000 f97c 	bl	8000afa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000802:	2019      	movs	r0, #25
 8000804:	f000 f995 	bl	8000b32 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <HAL_InitTick+0x9c>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <HAL_InitTick+0x9c>)
 800080e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_InitTick+0x9c>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000820:	f107 0210 	add.w	r2, r7, #16
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4611      	mov	r1, r2
 800082a:	4618      	mov	r0, r3
 800082c:	f001 f836 	bl	800189c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000830:	f001 f820 	bl	8001874 <HAL_RCC_GetPCLK2Freq>
 8000834:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <HAL_InitTick+0xa0>)
 800083a:	fba2 2303 	umull	r2, r3, r2, r3
 800083e:	0c9b      	lsrs	r3, r3, #18
 8000840:	3b01      	subs	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <HAL_InitTick+0xa4>)
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_InitTick+0xa8>)
 8000848:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_InitTick+0xa4>)
 800084c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000850:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_InitTick+0xa4>)
 8000854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000856:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_InitTick+0xa4>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_InitTick+0xa4>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <HAL_InitTick+0xa4>)
 8000866:	f001 f867 	bl	8001938 <HAL_TIM_Base_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d104      	bne.n	800087a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <HAL_InitTick+0xa4>)
 8000872:	f001 f8b9 	bl	80019e8 <HAL_TIM_Base_Start_IT>
 8000876:	4603      	mov	r3, r0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3730      	adds	r7, #48	; 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	431bde83 	.word	0x431bde83
 800088c:	200014a0 	.word	0x200014a0
 8000890:	40012c00 	.word	0x40012c00

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <MemManage_Handler+0x4>

080008a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <BusFault_Handler+0x4>

080008ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <UsageFault_Handler+0x4>

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
	...

080008c0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM1_UP_IRQHandler+0x10>)
 80008c6:	f001 f8e9 	bl	8001a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200014a0 	.word	0x200014a0

080008d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e2:	490d      	ldr	r1, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000906:	f7ff ffe5 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fc61 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090e:	f7ff fe23 	bl	8000558 <main>
  bx lr
 8000912:	4770      	bx	lr
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800091c:	080034c8 	.word	0x080034c8
  ldr r2, =_sbss
 8000920:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000924:	200014f8 	.word	0x200014f8

08000928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC1_2_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <HAL_Init+0x28>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_Init+0x28>)
 8000936:	f043 0310 	orr.w	r3, r3, #16
 800093a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f8d1 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	200f      	movs	r0, #15
 8000944:	f7ff ff50 	bl	80007e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff ff1a 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40022000 	.word	0x40022000

08000958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_IncTick+0x1c>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_IncTick+0x20>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <HAL_IncTick+0x20>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000008 	.word	0x20000008
 8000978:	200014e8 	.word	0x200014e8

0800097c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b02      	ldr	r3, [pc, #8]	; (800098c <HAL_GetTick+0x10>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	200014e8 	.word	0x200014e8

08000990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ac:	4013      	ands	r3, r2
 80009ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c2:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	60d3      	str	r3, [r2, #12]
}
 80009c8:	bf00      	nop
 80009ca:	3714      	adds	r7, #20
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <__NVIC_GetPriorityGrouping+0x18>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 0307 	and.w	r3, r3, #7
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	db0b      	blt.n	8000a1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	f003 021f 	and.w	r2, r3, #31
 8000a0c:	4906      	ldr	r1, [pc, #24]	; (8000a28 <__NVIC_EnableIRQ+0x34>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	095b      	lsrs	r3, r3, #5
 8000a14:	2001      	movs	r0, #1
 8000a16:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	e000e100 	.word	0xe000e100

08000a2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	db0a      	blt.n	8000a56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	490c      	ldr	r1, [pc, #48]	; (8000a78 <__NVIC_SetPriority+0x4c>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	0112      	lsls	r2, r2, #4
 8000a4c:	b2d2      	uxtb	r2, r2
 8000a4e:	440b      	add	r3, r1
 8000a50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a54:	e00a      	b.n	8000a6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	4908      	ldr	r1, [pc, #32]	; (8000a7c <__NVIC_SetPriority+0x50>)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	f003 030f 	and.w	r3, r3, #15
 8000a62:	3b04      	subs	r3, #4
 8000a64:	0112      	lsls	r2, r2, #4
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	440b      	add	r3, r1
 8000a6a:	761a      	strb	r2, [r3, #24]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b089      	sub	sp, #36	; 0x24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	f1c3 0307 	rsb	r3, r3, #7
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	bf28      	it	cs
 8000a9e:	2304      	movcs	r3, #4
 8000aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3304      	adds	r3, #4
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d902      	bls.n	8000ab0 <NVIC_EncodePriority+0x30>
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3b03      	subs	r3, #3
 8000aae:	e000      	b.n	8000ab2 <NVIC_EncodePriority+0x32>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43da      	mvns	r2, r3
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad2:	43d9      	mvns	r1, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	4313      	orrs	r3, r2
         );
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff4f 	bl	8000990 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff64 	bl	80009d8 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ffb2 	bl	8000a80 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff81 	bl	8000a2c <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff57 	bl	80009f4 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b08b      	sub	sp, #44	; 0x2c
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e169      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b64:	2201      	movs	r2, #1
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	f040 8158 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	4a9a      	ldr	r2, [pc, #616]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d05e      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b8c:	4a98      	ldr	r2, [pc, #608]	; (8000df0 <HAL_GPIO_Init+0x2a0>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d875      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b92:	4a98      	ldr	r2, [pc, #608]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d058      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000b98:	4a96      	ldr	r2, [pc, #600]	; (8000df4 <HAL_GPIO_Init+0x2a4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d86f      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000b9e:	4a96      	ldr	r2, [pc, #600]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d052      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000ba4:	4a94      	ldr	r2, [pc, #592]	; (8000df8 <HAL_GPIO_Init+0x2a8>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d869      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000baa:	4a94      	ldr	r2, [pc, #592]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d04c      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bb0:	4a92      	ldr	r2, [pc, #584]	; (8000dfc <HAL_GPIO_Init+0x2ac>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d863      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bb6:	4a92      	ldr	r2, [pc, #584]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d046      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a90      	ldr	r2, [pc, #576]	; (8000e00 <HAL_GPIO_Init+0x2b0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d85d      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bc2:	2b12      	cmp	r3, #18
 8000bc4:	d82a      	bhi.n	8000c1c <HAL_GPIO_Init+0xcc>
 8000bc6:	2b12      	cmp	r3, #18
 8000bc8:	d859      	bhi.n	8000c7e <HAL_GPIO_Init+0x12e>
 8000bca:	a201      	add	r2, pc, #4	; (adr r2, 8000bd0 <HAL_GPIO_Init+0x80>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000c4b 	.word	0x08000c4b
 8000bd4:	08000c25 	.word	0x08000c25
 8000bd8:	08000c37 	.word	0x08000c37
 8000bdc:	08000c79 	.word	0x08000c79
 8000be0:	08000c7f 	.word	0x08000c7f
 8000be4:	08000c7f 	.word	0x08000c7f
 8000be8:	08000c7f 	.word	0x08000c7f
 8000bec:	08000c7f 	.word	0x08000c7f
 8000bf0:	08000c7f 	.word	0x08000c7f
 8000bf4:	08000c7f 	.word	0x08000c7f
 8000bf8:	08000c7f 	.word	0x08000c7f
 8000bfc:	08000c7f 	.word	0x08000c7f
 8000c00:	08000c7f 	.word	0x08000c7f
 8000c04:	08000c7f 	.word	0x08000c7f
 8000c08:	08000c7f 	.word	0x08000c7f
 8000c0c:	08000c7f 	.word	0x08000c7f
 8000c10:	08000c7f 	.word	0x08000c7f
 8000c14:	08000c2d 	.word	0x08000c2d
 8000c18:	08000c41 	.word	0x08000c41
 8000c1c:	4a79      	ldr	r2, [pc, #484]	; (8000e04 <HAL_GPIO_Init+0x2b4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d013      	beq.n	8000c4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c22:	e02c      	b.n	8000c7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	623b      	str	r3, [r7, #32]
          break;
 8000c2a:	e029      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	3304      	adds	r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
          break;
 8000c34:	e024      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e01f      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	330c      	adds	r3, #12
 8000c46:	623b      	str	r3, [r7, #32]
          break;
 8000c48:	e01a      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d102      	bne.n	8000c58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c52:	2304      	movs	r3, #4
 8000c54:	623b      	str	r3, [r7, #32]
          break;
 8000c56:	e013      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d105      	bne.n	8000c6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c60:	2308      	movs	r3, #8
 8000c62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	611a      	str	r2, [r3, #16]
          break;
 8000c6a:	e009      	b.n	8000c80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	69fa      	ldr	r2, [r7, #28]
 8000c74:	615a      	str	r2, [r3, #20]
          break;
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
          break;
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x130>
          break;
 8000c7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	2bff      	cmp	r3, #255	; 0xff
 8000c84:	d801      	bhi.n	8000c8a <HAL_GPIO_Init+0x13a>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	e001      	b.n	8000c8e <HAL_GPIO_Init+0x13e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	2bff      	cmp	r3, #255	; 0xff
 8000c94:	d802      	bhi.n	8000c9c <HAL_GPIO_Init+0x14c>
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	e002      	b.n	8000ca2 <HAL_GPIO_Init+0x152>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	3b08      	subs	r3, #8
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	210f      	movs	r1, #15
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	6a39      	ldr	r1, [r7, #32]
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a4c      	ldr	r2, [pc, #304]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b4a      	ldr	r3, [pc, #296]	; (8000e08 <HAL_GPIO_Init+0x2b8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce8:	4a48      	ldr	r2, [pc, #288]	; (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	089b      	lsrs	r3, r3, #2
 8000cee:	3302      	adds	r3, #2
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	f003 0303 	and.w	r3, r3, #3
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a40      	ldr	r2, [pc, #256]	; (8000e10 <HAL_GPIO_Init+0x2c0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d013      	beq.n	8000d3c <HAL_GPIO_Init+0x1ec>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a3f      	ldr	r2, [pc, #252]	; (8000e14 <HAL_GPIO_Init+0x2c4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d00d      	beq.n	8000d38 <HAL_GPIO_Init+0x1e8>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a3e      	ldr	r2, [pc, #248]	; (8000e18 <HAL_GPIO_Init+0x2c8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d007      	beq.n	8000d34 <HAL_GPIO_Init+0x1e4>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a3d      	ldr	r2, [pc, #244]	; (8000e1c <HAL_GPIO_Init+0x2cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d101      	bne.n	8000d30 <HAL_GPIO_Init+0x1e0>
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e006      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d30:	2304      	movs	r3, #4
 8000d32:	e004      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e002      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <HAL_GPIO_Init+0x1ee>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d40:	f002 0203 	and.w	r2, r2, #3
 8000d44:	0092      	lsls	r2, r2, #2
 8000d46:	4093      	lsls	r3, r2
 8000d48:	68fa      	ldr	r2, [r7, #12]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d4e:	492f      	ldr	r1, [pc, #188]	; (8000e0c <HAL_GPIO_Init+0x2bc>)
 8000d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	3302      	adds	r3, #2
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d006      	beq.n	8000d76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d68:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	492c      	ldr	r1, [pc, #176]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	600b      	str	r3, [r1, #0]
 8000d74:	e006      	b.n	8000d84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d76:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	4928      	ldr	r1, [pc, #160]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d80:	4013      	ands	r3, r2
 8000d82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d006      	beq.n	8000d9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4922      	ldr	r1, [pc, #136]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	491e      	ldr	r1, [pc, #120]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	4918      	ldr	r1, [pc, #96]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	608b      	str	r3, [r1, #8]
 8000dc4:	e006      	b.n	8000dd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dc8:	689a      	ldr	r2, [r3, #8]
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4914      	ldr	r1, [pc, #80]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d021      	beq.n	8000e24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	490e      	ldr	r1, [pc, #56]	; (8000e20 <HAL_GPIO_Init+0x2d0>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	60cb      	str	r3, [r1, #12]
 8000dec:	e021      	b.n	8000e32 <HAL_GPIO_Init+0x2e2>
 8000dee:	bf00      	nop
 8000df0:	10320000 	.word	0x10320000
 8000df4:	10310000 	.word	0x10310000
 8000df8:	10220000 	.word	0x10220000
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10120000 	.word	0x10120000
 8000e04:	10110000 	.word	0x10110000
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010000 	.word	0x40010000
 8000e10:	40010800 	.word	0x40010800
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40011400 	.word	0x40011400
 8000e20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	4909      	ldr	r1, [pc, #36]	; (8000e54 <HAL_GPIO_Init+0x304>)
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e34:	3301      	adds	r3, #1
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f47f ae8e 	bne.w	8000b64 <HAL_GPIO_Init+0x14>
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	372c      	adds	r7, #44	; 0x2c
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea2:	e003      	b.n	8000eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ec8:	887a      	ldrh	r2, [r7, #2]
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	041a      	lsls	r2, r3, #16
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	400b      	ands	r3, r1
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	611a      	str	r2, [r3, #16]
}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e304      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8087 	beq.w	8001016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f08:	4b92      	ldr	r3, [pc, #584]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d00c      	beq.n	8000f2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f14:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d112      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
 8000f20:	4b8c      	ldr	r3, [pc, #560]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2c:	d10b      	bne.n	8000f46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	4b89      	ldr	r3, [pc, #548]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d06c      	beq.n	8001014 <HAL_RCC_OscConfig+0x12c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d168      	bne.n	8001014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e2de      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x76>
 8000f50:	4b80      	ldr	r3, [pc, #512]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a7f      	ldr	r2, [pc, #508]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e02e      	b.n	8000fbc <HAL_RCC_OscConfig+0xd4>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x98>
 8000f66:	4b7b      	ldr	r3, [pc, #492]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a7a      	ldr	r2, [pc, #488]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b78      	ldr	r3, [pc, #480]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a77      	ldr	r2, [pc, #476]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e01d      	b.n	8000fbc <HAL_RCC_OscConfig+0xd4>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0xbc>
 8000f8a:	4b72      	ldr	r3, [pc, #456]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a71      	ldr	r2, [pc, #452]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f94:	6013      	str	r3, [r2, #0]
 8000f96:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a6e      	ldr	r2, [pc, #440]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa0:	6013      	str	r3, [r2, #0]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0xd4>
 8000fa4:	4b6b      	ldr	r3, [pc, #428]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a6a      	ldr	r2, [pc, #424]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	4b68      	ldr	r3, [pc, #416]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a67      	ldr	r2, [pc, #412]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d013      	beq.n	8000fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fcda 	bl	800097c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fcd6 	bl	800097c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b64      	cmp	r3, #100	; 0x64
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e292      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fde:	4b5d      	ldr	r3, [pc, #372]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0xe4>
 8000fea:	e014      	b.n	8001016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fcc6 	bl	800097c <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff4:	f7ff fcc2 	bl	800097c <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e27e      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001006:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x10c>
 8001012:	e000      	b.n	8001016 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d063      	beq.n	80010ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001022:	4b4c      	ldr	r3, [pc, #304]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 030c 	and.w	r3, r3, #12
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00b      	beq.n	8001046 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800102e:	4b49      	ldr	r3, [pc, #292]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 030c 	and.w	r3, r3, #12
 8001036:	2b08      	cmp	r3, #8
 8001038:	d11c      	bne.n	8001074 <HAL_RCC_OscConfig+0x18c>
 800103a:	4b46      	ldr	r3, [pc, #280]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d116      	bne.n	8001074 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	4b43      	ldr	r3, [pc, #268]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <HAL_RCC_OscConfig+0x176>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d001      	beq.n	800105e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e252      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4939      	ldr	r1, [pc, #228]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 800106e:	4313      	orrs	r3, r2
 8001070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001072:	e03a      	b.n	80010ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d020      	beq.n	80010be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001082:	f7ff fc7b 	bl	800097c <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108a:	f7ff fc77 	bl	800097c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e233      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f0      	beq.n	800108a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4927      	ldr	r1, [pc, #156]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	600b      	str	r3, [r1, #0]
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010be:	4b26      	ldr	r3, [pc, #152]	; (8001158 <HAL_RCC_OscConfig+0x270>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fc5a 	bl	800097c <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc56 	bl	800097c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e212      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d03a      	beq.n	800116c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d019      	beq.n	8001132 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_RCC_OscConfig+0x274>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001104:	f7ff fc3a 	bl	800097c <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800110c:	f7ff fc36 	bl	800097c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e1f2      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111e:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <HAL_RCC_OscConfig+0x26c>)
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0f0      	beq.n	800110c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 fbe6 	bl	80018fc <RCC_Delay>
 8001130:	e01c      	b.n	800116c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_RCC_OscConfig+0x274>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001138:	f7ff fc20 	bl	800097c <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800113e:	e00f      	b.n	8001160 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001140:	f7ff fc1c 	bl	800097c <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d908      	bls.n	8001160 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	e1d8      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000
 8001158:	42420000 	.word	0x42420000
 800115c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001160:	4b9b      	ldr	r3, [pc, #620]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e9      	bne.n	8001140 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a6 	beq.w	80012c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117a:	2300      	movs	r3, #0
 800117c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117e:	4b94      	ldr	r3, [pc, #592]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10d      	bne.n	80011a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b91      	ldr	r3, [pc, #580]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b8e      	ldr	r3, [pc, #568]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a2:	2301      	movs	r3, #1
 80011a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a6:	4b8b      	ldr	r3, [pc, #556]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d118      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b2:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a87      	ldr	r2, [pc, #540]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011be:	f7ff fbdd 	bl	800097c <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011c6:	f7ff fbd9 	bl	800097c <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b64      	cmp	r3, #100	; 0x64
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e195      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d8:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x4ec>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x312>
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80011ee:	6a1b      	ldr	r3, [r3, #32]
 80011f0:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6213      	str	r3, [r2, #32]
 80011f8:	e02d      	b.n	8001256 <HAL_RCC_OscConfig+0x36e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x334>
 8001202:	4b73      	ldr	r3, [pc, #460]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a72      	ldr	r2, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a6f      	ldr	r2, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	e01c      	b.n	8001256 <HAL_RCC_OscConfig+0x36e>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b05      	cmp	r3, #5
 8001222:	d10c      	bne.n	800123e <HAL_RCC_OscConfig+0x356>
 8001224:	4b6a      	ldr	r3, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4a69      	ldr	r2, [pc, #420]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6213      	str	r3, [r2, #32]
 8001230:	4b67      	ldr	r3, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a66      	ldr	r2, [pc, #408]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	e00b      	b.n	8001256 <HAL_RCC_OscConfig+0x36e>
 800123e:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a63      	ldr	r2, [pc, #396]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b61      	ldr	r3, [pc, #388]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a60      	ldr	r2, [pc, #384]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d015      	beq.n	800128a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125e:	f7ff fb8d 	bl	800097c <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001264:	e00a      	b.n	800127c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001266:	f7ff fb89 	bl	800097c <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	f241 3288 	movw	r2, #5000	; 0x1388
 8001274:	4293      	cmp	r3, r2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e143      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127c:	4b54      	ldr	r3, [pc, #336]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0ee      	beq.n	8001266 <HAL_RCC_OscConfig+0x37e>
 8001288:	e014      	b.n	80012b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fb77 	bl	800097c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb73 	bl	800097c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e12d      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1ee      	bne.n	8001292 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d105      	bne.n	80012c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ba:	4b45      	ldr	r3, [pc, #276]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a44      	ldr	r2, [pc, #272]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 808c 	beq.w	80013e8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80012d0:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80012de:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d108      	bne.n	80012fc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80012ea:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80012f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f6:	d101      	bne.n	80012fc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e103      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2b02      	cmp	r3, #2
 8001302:	d14e      	bne.n	80013a2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001304:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d009      	beq.n	8001324 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001310:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0ef      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_RCC_OscConfig+0x4f0>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb27 	bl	800097c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001332:	f7ff fb23 	bl	800097c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b64      	cmp	r3, #100	; 0x64
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e0df      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135c:	491c      	ldr	r1, [pc, #112]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 800135e:	4313      	orrs	r3, r2
 8001360:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001366:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4918      	ldr	r1, [pc, #96]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	4313      	orrs	r3, r2
 8001372:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_RCC_OscConfig+0x4f0>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff faff 	bl	800097c <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001382:	f7ff fafb 	bl	800097c <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b64      	cmp	r3, #100	; 0x64
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e0b7      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x49a>
 80013a0:	e022      	b.n	80013e8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <HAL_RCC_OscConfig+0x4e8>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x4f0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fae2 	bl	800097c <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80013ba:	e00f      	b.n	80013dc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80013bc:	f7ff fade 	bl	800097c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d908      	bls.n	80013dc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e09a      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40007000 	.word	0x40007000
 80013d8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80013dc:	4b4b      	ldr	r3, [pc, #300]	; (800150c <HAL_RCC_OscConfig+0x624>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e9      	bne.n	80013bc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8088 	beq.w	8001502 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x624>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d068      	beq.n	80014d0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d14d      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001406:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_RCC_OscConfig+0x628>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fab6 	bl	800097c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001414:	f7ff fab2 	bl	800097c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e06e      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x624>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143a:	d10f      	bne.n	800145c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x624>)
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4931      	ldr	r1, [pc, #196]	; (800150c <HAL_RCC_OscConfig+0x624>)
 8001446:	4313      	orrs	r3, r2
 8001448:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x624>)
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f023 020f 	bic.w	r2, r3, #15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	492d      	ldr	r1, [pc, #180]	; (800150c <HAL_RCC_OscConfig+0x624>)
 8001458:	4313      	orrs	r3, r2
 800145a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800145c:	4b2b      	ldr	r3, [pc, #172]	; (800150c <HAL_RCC_OscConfig+0x624>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	430b      	orrs	r3, r1
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x624>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x628>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fa7f 	bl	800097c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fa7b 	bl	800097c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e037      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001494:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x624>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x59a>
 80014a0:	e02f      	b.n	8001502 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x628>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fa68 	bl	800097c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fa64 	bl	800097c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e020      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_RCC_OscConfig+0x624>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c8>
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e013      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x624>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d001      	beq.n	8001502 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	42420060 	.word	0x42420060

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff f9ba 	bl	800097c <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff f9b6 	bl	800097c <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	; 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	; (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f890 	bl	80007e8 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	08003440 	.word	0x08003440
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b091      	sub	sp, #68	; 0x44
 80016ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_RCC_GetSysClockFreq+0x160>)
 80016f0:	f107 0414 	add.w	r4, r7, #20
 80016f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f6:	c407      	stmia	r4!, {r0, r1, r2}
 80016f8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80016fa:	4b54      	ldr	r3, [pc, #336]	; (800184c <HAL_RCC_GetSysClockFreq+0x164>)
 80016fc:	1d3c      	adds	r4, r7, #4
 80016fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
 8001708:	2300      	movs	r3, #0
 800170a:	633b      	str	r3, [r7, #48]	; 0x30
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b04      	cmp	r3, #4
 800172e:	d002      	beq.n	8001736 <HAL_RCC_GetSysClockFreq+0x4e>
 8001730:	2b08      	cmp	r3, #8
 8001732:	d003      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x54>
 8001734:	e080      	b.n	8001838 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800173a:	e080      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	0c9b      	lsrs	r3, r3, #18
 8001740:	f003 030f 	and.w	r3, r3, #15
 8001744:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001748:	4413      	add	r3, r2
 800174a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d066      	beq.n	8001828 <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001766:	4413      	add	r3, r2
 8001768:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	091b      	lsrs	r3, r3, #4
 8001780:	f003 030f 	and.w	r3, r3, #15
 8001784:	3301      	adds	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001788:	4b31      	ldr	r3, [pc, #196]	; (8001850 <HAL_RCC_GetSysClockFreq+0x168>)
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	3302      	adds	r3, #2
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	4618      	mov	r0, r3
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	461a      	mov	r2, r3
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	fb02 f501 	mul.w	r5, r2, r1
 80017aa:	fb00 f403 	mul.w	r4, r0, r3
 80017ae:	442c      	add	r4, r5
 80017b0:	fba0 2302 	umull	r2, r3, r0, r2
 80017b4:	18e1      	adds	r1, r4, r3
 80017b6:	460b      	mov	r3, r1
 80017b8:	4926      	ldr	r1, [pc, #152]	; (8001854 <HAL_RCC_GetSysClockFreq+0x16c>)
 80017ba:	fb01 f003 	mul.w	r0, r1, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	fb01 f102 	mul.w	r1, r1, r2
 80017c4:	4401      	add	r1, r0
 80017c6:	4823      	ldr	r0, [pc, #140]	; (8001854 <HAL_RCC_GetSysClockFreq+0x16c>)
 80017c8:	fba2 4500 	umull	r4, r5, r2, r0
 80017cc:	194b      	adds	r3, r1, r5
 80017ce:	461d      	mov	r5, r3
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	4618      	mov	r0, r3
 80017d4:	f04f 0100 	mov.w	r1, #0
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	461a      	mov	r2, r3
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	fb02 fc01 	mul.w	ip, r2, r1
 80017e4:	fb00 f603 	mul.w	r6, r0, r3
 80017e8:	4466      	add	r6, ip
 80017ea:	fba0 2302 	umull	r2, r3, r0, r2
 80017ee:	18f1      	adds	r1, r6, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	4620      	mov	r0, r4
 80017f4:	4629      	mov	r1, r5
 80017f6:	f7fe fd1b 	bl	8000230 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001802:	e007      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001808:	fb02 f203 	mul.w	r2, r2, r3
 800180c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001814:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001818:	461a      	mov	r2, r3
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	4293      	cmp	r3, r2
 800181e:	d108      	bne.n	8001832 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001826:	e004      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_RCC_GetSysClockFreq+0x170>)
 800182c:	fb02 f303 	mul.w	r3, r2, r3
 8001830:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001834:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001836:	e002      	b.n	800183e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_RCC_GetSysClockFreq+0x174>)
 800183a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800183c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800183e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001840:	4618      	mov	r0, r3
 8001842:	3744      	adds	r7, #68	; 0x44
 8001844:	46bd      	mov	sp, r7
 8001846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001848:	08003418 	.word	0x08003418
 800184c:	08003428 	.word	0x08003428
 8001850:	40021000 	.word	0x40021000
 8001854:	017d7840 	.word	0x017d7840
 8001858:	003d0900 	.word	0x003d0900
 800185c:	007a1200 	.word	0x007a1200

08001860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_RCC_GetHCLKFreq+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr
 8001870:	20000000 	.word	0x20000000

08001874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001878:	f7ff fff2 	bl	8001860 <HAL_RCC_GetHCLKFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	0adb      	lsrs	r3, r3, #11
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	4903      	ldr	r1, [pc, #12]	; (8001898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001890:	4618      	mov	r0, r3
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	08003450 	.word	0x08003450

0800189c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	220f      	movs	r2, #15
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_RCC_GetClockConfig+0x58>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_RCC_GetClockConfig+0x5c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0207 	and.w	r2, r3, #7
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40022000 	.word	0x40022000

080018fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <RCC_Delay+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <RCC_Delay+0x38>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001918:	bf00      	nop
  }
  while (Delay --);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <RCC_Delay+0x1c>
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000000 	.word	0x20000000
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e041      	b.n	80019ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f839 	bl	80019d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 f9bc 	bl	8001cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d001      	beq.n	8001a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e03f      	b.n	8001a80 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1b      	ldr	r2, [pc, #108]	; (8001a8c <HAL_TIM_Base_Start_IT+0xa4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x62>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2a:	d00e      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x62>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a17      	ldr	r2, [pc, #92]	; (8001a90 <HAL_TIM_Base_Start_IT+0xa8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x62>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a16      	ldr	r2, [pc, #88]	; (8001a94 <HAL_TIM_Base_Start_IT+0xac>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d004      	beq.n	8001a4a <HAL_TIM_Base_Start_IT+0x62>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <HAL_TIM_Base_Start_IT+0xb0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b06      	cmp	r3, #6
 8001a5a:	d010      	beq.n	8001a7e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6c:	e007      	b.n	8001a7e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0201 	orr.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40012c00 	.word	0x40012c00
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40000800 	.word	0x40000800
 8001a98:	40000c00 	.word	0x40000c00

08001a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d122      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d11b      	bne.n	8001af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f06f 0202 	mvn.w	r2, #2
 8001ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f8ed 	bl	8001cbe <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e005      	b.n	8001af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8e0 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f8ef 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d122      	bne.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d11b      	bne.n	8001b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0204 	mvn.w	r2, #4
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f8c3 	bl	8001cbe <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f8b6 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f8c5 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d122      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0308 	and.w	r3, r3, #8
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d11b      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f06f 0208 	mvn.w	r2, #8
 8001b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2204      	movs	r2, #4
 8001b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f899 	bl	8001cbe <HAL_TIM_IC_CaptureCallback>
 8001b8c:	e005      	b.n	8001b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f88c 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f89b 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0310 	and.w	r3, r3, #16
 8001baa:	2b10      	cmp	r3, #16
 8001bac:	d122      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b10      	cmp	r3, #16
 8001bba:	d11b      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0210 	mvn.w	r2, #16
 8001bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f86f 	bl	8001cbe <HAL_TIM_IC_CaptureCallback>
 8001be0:	e005      	b.n	8001bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f862 	bl	8001cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f871 	bl	8001cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10e      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0201 	mvn.w	r2, #1
 8001c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fd98 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2a:	2b80      	cmp	r3, #128	; 0x80
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c38:	2b80      	cmp	r3, #128	; 0x80
 8001c3a:	d107      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f8c9 	bl	8001dde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b40      	cmp	r3, #64	; 0x40
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c64:	2b40      	cmp	r3, #64	; 0x40
 8001c66:	d107      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f835 	bl	8001ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d10e      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b20      	cmp	r3, #32
 8001c92:	d107      	bne.n	8001ca4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0220 	mvn.w	r2, #32
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f894 	bl	8001dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001cc6:	bf00      	nop
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a2d      	ldr	r2, [pc, #180]	; (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d00f      	beq.n	8001d2c <TIM_Base_SetConfig+0x38>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d12:	d00b      	beq.n	8001d2c <TIM_Base_SetConfig+0x38>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a2a      	ldr	r2, [pc, #168]	; (8001dc0 <TIM_Base_SetConfig+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <TIM_Base_SetConfig+0x38>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a29      	ldr	r2, [pc, #164]	; (8001dc4 <TIM_Base_SetConfig+0xd0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <TIM_Base_SetConfig+0x38>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a28      	ldr	r2, [pc, #160]	; (8001dc8 <TIM_Base_SetConfig+0xd4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d108      	bne.n	8001d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00f      	beq.n	8001d66 <TIM_Base_SetConfig+0x72>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4c:	d00b      	beq.n	8001d66 <TIM_Base_SetConfig+0x72>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <TIM_Base_SetConfig+0xcc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <TIM_Base_SetConfig+0x72>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <TIM_Base_SetConfig+0xd0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d003      	beq.n	8001d66 <TIM_Base_SetConfig+0x72>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <TIM_Base_SetConfig+0xd4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d108      	bne.n	8001d78 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	695b      	ldr	r3, [r3, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <TIM_Base_SetConfig+0xc8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d103      	bne.n	8001dac <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	615a      	str	r2, [r3, #20]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000800 	.word	0x40000800
 8001dc8:	40000c00 	.word	0x40000c00

08001dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e02:	2b84      	cmp	r3, #132	; 0x84
 8001e04:	d005      	beq.n	8001e12 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e06:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3303      	adds	r3, #3
 8001e10:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e12:	68fb      	ldr	r3, [r7, #12]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e22:	f000 fad3 	bl	80023cc <vTaskStartScheduler>
  
  return osOK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af04      	add	r7, sp, #16
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <osThreadCreate+0x54>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d01c      	beq.n	8001e80 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685c      	ldr	r4, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681d      	ldr	r5, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691e      	ldr	r6, [r3, #16]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ffc9 	bl	8001df0 <makeFreeRtosPriority>
 8001e5e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	9100      	str	r1, [sp, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	4632      	mov	r2, r6
 8001e72:	4629      	mov	r1, r5
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f8d4 	bl	8002022 <xTaskCreateStatic>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e01c      	b.n	8001eba <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685c      	ldr	r4, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e8c:	b29e      	uxth	r6, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffab 	bl	8001df0 <makeFreeRtosPriority>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	4620      	mov	r0, r4
 8001eac:	f000 f915 	bl	80020da <xTaskCreate>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d001      	beq.n	8001eba <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e000      	b.n	8001ebc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f103 0208 	add.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001edc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f103 0208 	add.w	r2, r3, #8
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f103 0208 	add.w	r2, r3, #8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b085      	sub	sp, #20
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1c5a      	adds	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f76:	d103      	bne.n	8001f80 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e00c      	b.n	8001f9a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3308      	adds	r3, #8
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	e002      	b.n	8001f8e <vListInsert+0x2e>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d2f6      	bcs.n	8001f88 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1c5a      	adds	r2, r3, #1
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	601a      	str	r2, [r3, #0]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr

08001fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6892      	ldr	r2, [r2, #8]
 8001fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6852      	ldr	r2, [r2, #4]
 8001ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d103      	bne.n	8002004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	1e5a      	subs	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002022:	b580      	push	{r7, lr}
 8002024:	b08e      	sub	sp, #56	; 0x38
 8002026:	af04      	add	r7, sp, #16
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10a      	bne.n	800204c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203a:	f383 8811 	msr	BASEPRI, r3
 800203e:	f3bf 8f6f 	isb	sy
 8002042:	f3bf 8f4f 	dsb	sy
 8002046:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002048:	bf00      	nop
 800204a:	e7fe      	b.n	800204a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10a      	bne.n	8002068 <xTaskCreateStatic+0x46>
	__asm volatile
 8002052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002056:	f383 8811 	msr	BASEPRI, r3
 800205a:	f3bf 8f6f 	isb	sy
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	61fb      	str	r3, [r7, #28]
}
 8002064:	bf00      	nop
 8002066:	e7fe      	b.n	8002066 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002068:	23b4      	movs	r3, #180	; 0xb4
 800206a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2bb4      	cmp	r3, #180	; 0xb4
 8002070:	d00a      	beq.n	8002088 <xTaskCreateStatic+0x66>
	__asm volatile
 8002072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002076:	f383 8811 	msr	BASEPRI, r3
 800207a:	f3bf 8f6f 	isb	sy
 800207e:	f3bf 8f4f 	dsb	sy
 8002082:	61bb      	str	r3, [r7, #24]
}
 8002084:	bf00      	nop
 8002086:	e7fe      	b.n	8002086 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01e      	beq.n	80020cc <xTaskCreateStatic+0xaa>
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01b      	beq.n	80020cc <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800209c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	2202      	movs	r2, #2
 80020a2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80020a6:	2300      	movs	r3, #0
 80020a8:	9303      	str	r3, [sp, #12]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 f850 	bl	8002164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80020c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020c6:	f000 f8e3 	bl	8002290 <prvAddNewTaskToReadyList>
 80020ca:	e001      	b.n	80020d0 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80020d0:	697b      	ldr	r3, [r7, #20]
	}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b08c      	sub	sp, #48	; 0x30
 80020de:	af04      	add	r7, sp, #16
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4613      	mov	r3, r2
 80020e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fe96 	bl	8002e20 <pvPortMalloc>
 80020f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80020fc:	20b4      	movs	r0, #180	; 0xb4
 80020fe:	f000 fe8f 	bl	8002e20 <pvPortMalloc>
 8002102:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
 8002110:	e005      	b.n	800211e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f000 ff48 	bl	8002fa8 <vPortFree>
 8002118:	e001      	b.n	800211e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d017      	beq.n	8002154 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	2300      	movs	r3, #0
 8002130:	9303      	str	r3, [sp, #12]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 f80e 	bl	8002164 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002148:	69f8      	ldr	r0, [r7, #28]
 800214a:	f000 f8a1 	bl	8002290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800214e:	2301      	movs	r3, #1
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	e002      	b.n	800215a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002158:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800215a:	69bb      	ldr	r3, [r7, #24]
	}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800217c:	3b01      	subs	r3, #1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f023 0307 	bic.w	r3, r3, #7
 800218a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00a      	beq.n	80021ac <prvInitialiseNewTask+0x48>
	__asm volatile
 8002196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219a:	f383 8811 	msr	BASEPRI, r3
 800219e:	f3bf 8f6f 	isb	sy
 80021a2:	f3bf 8f4f 	dsb	sy
 80021a6:	617b      	str	r3, [r7, #20]
}
 80021a8:	bf00      	nop
 80021aa:	e7fe      	b.n	80021aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ac:	2300      	movs	r3, #0
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	e012      	b.n	80021d8 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4413      	add	r3, r2
 80021b8:	7819      	ldrb	r1, [r3, #0]
 80021ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	3334      	adds	r3, #52	; 0x34
 80021c2:	460a      	mov	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	4413      	add	r3, r2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d9e9      	bls.n	80021b2 <prvInitialiseNewTask+0x4e>
 80021de:	e000      	b.n	80021e2 <prvInitialiseNewTask+0x7e>
		{
			break;
 80021e0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d901      	bls.n	80021f4 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021f0:	2306      	movs	r3, #6
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	2200      	movs	r2, #0
 8002204:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	3304      	adds	r3, #4
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fe79 	bl	8001f02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	3318      	adds	r3, #24
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fe74 	bl	8001f02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	f1c3 0207 	rsb	r2, r3, #7
 8002226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	2200      	movs	r2, #0
 8002234:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	2200      	movs	r2, #0
 800223c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002242:	334c      	adds	r3, #76	; 0x4c
 8002244:	2260      	movs	r2, #96	; 0x60
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f000 ffe7 	bl	800321c <memset>
 800224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <prvInitialiseNewTask+0x120>)
 8002252:	651a      	str	r2, [r3, #80]	; 0x50
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <prvInitialiseNewTask+0x124>)
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <prvInitialiseNewTask+0x128>)
 800225e:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	68f9      	ldr	r1, [r7, #12]
 8002264:	69b8      	ldr	r0, [r7, #24]
 8002266:	f000 fc29 	bl	8002abc <pxPortInitialiseStack>
 800226a:	4602      	mov	r2, r0
 800226c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800227c:	bf00      	nop
 800227e:	3720      	adds	r7, #32
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	08003478 	.word	0x08003478
 8002288:	08003498 	.word	0x08003498
 800228c:	08003458 	.word	0x08003458

08002290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002298:	f000 fd00 	bl	8002c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <prvAddNewTaskToReadyList+0xb8>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	4a29      	ldr	r2, [pc, #164]	; (8002348 <prvAddNewTaskToReadyList+0xb8>)
 80022a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <prvAddNewTaskToReadyList+0xbc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80022ae:	4a27      	ldr	r2, [pc, #156]	; (800234c <prvAddNewTaskToReadyList+0xbc>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <prvAddNewTaskToReadyList+0xb8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d110      	bne.n	80022de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80022bc:	f000 fad2 	bl	8002864 <prvInitialiseTaskLists>
 80022c0:	e00d      	b.n	80022de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80022c2:	4b23      	ldr	r3, [pc, #140]	; (8002350 <prvAddNewTaskToReadyList+0xc0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <prvAddNewTaskToReadyList+0xbc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d802      	bhi.n	80022de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <prvAddNewTaskToReadyList+0xbc>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <prvAddNewTaskToReadyList+0xc4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <prvAddNewTaskToReadyList+0xc4>)
 80022e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ec:	2201      	movs	r2, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <prvAddNewTaskToReadyList+0xc8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	4a18      	ldr	r2, [pc, #96]	; (8002358 <prvAddNewTaskToReadyList+0xc8>)
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4a15      	ldr	r2, [pc, #84]	; (800235c <prvAddNewTaskToReadyList+0xcc>)
 8002308:	441a      	add	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4610      	mov	r0, r2
 8002312:	f7ff fe02 	bl	8001f1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002316:	f000 fcf1 	bl	8002cfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <prvAddNewTaskToReadyList+0xc0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00e      	beq.n	8002340 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <prvAddNewTaskToReadyList+0xbc>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <prvAddNewTaskToReadyList+0xd0>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	20000444 	.word	0x20000444
 800234c:	20000344 	.word	0x20000344
 8002350:	20000450 	.word	0x20000450
 8002354:	20000460 	.word	0x20000460
 8002358:	2000044c 	.word	0x2000044c
 800235c:	20000348 	.word	0x20000348
 8002360:	e000ed04 	.word	0xe000ed04

08002364 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d017      	beq.n	80023a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <vTaskDelay+0x60>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <vTaskDelay+0x30>
	__asm volatile
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	60bb      	str	r3, [r7, #8]
}
 8002390:	bf00      	nop
 8002392:	e7fe      	b.n	8002392 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002394:	f000 f884 	bl	80024a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002398:	2100      	movs	r1, #0
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fb28 	bl	80029f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80023a0:	f000 f88c 	bl	80024bc <xTaskResumeAll>
 80023a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d107      	bne.n	80023bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <vTaskDelay+0x64>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2000046c 	.word	0x2000046c
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023da:	463a      	mov	r2, r7
 80023dc:	1d39      	adds	r1, r7, #4
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8a0 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023e8:	6839      	ldr	r1, [r7, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	9202      	str	r2, [sp, #8]
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2300      	movs	r3, #0
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2300      	movs	r3, #0
 80023f8:	460a      	mov	r2, r1
 80023fa:	4921      	ldr	r1, [pc, #132]	; (8002480 <vTaskStartScheduler+0xb4>)
 80023fc:	4821      	ldr	r0, [pc, #132]	; (8002484 <vTaskStartScheduler+0xb8>)
 80023fe:	f7ff fe10 	bl	8002022 <xTaskCreateStatic>
 8002402:	4603      	mov	r3, r0
 8002404:	4a20      	ldr	r2, [pc, #128]	; (8002488 <vTaskStartScheduler+0xbc>)
 8002406:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <vTaskStartScheduler+0xbc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002410:	2301      	movs	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e001      	b.n	800241a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002416:	2300      	movs	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11b      	bne.n	8002458 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	613b      	str	r3, [r7, #16]
}
 8002432:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <vTaskStartScheduler+0xc0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	334c      	adds	r3, #76	; 0x4c
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <vTaskStartScheduler+0xc4>)
 800243c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <vTaskStartScheduler+0xc8>)
 8002440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002444:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <vTaskStartScheduler+0xcc>)
 8002448:	2201      	movs	r2, #1
 800244a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <vTaskStartScheduler+0xd0>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002452:	f000 fbb1 	bl	8002bb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002456:	e00e      	b.n	8002476 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800245e:	d10a      	bne.n	8002476 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	60fb      	str	r3, [r7, #12]
}
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <vTaskStartScheduler+0xa8>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	08003438 	.word	0x08003438
 8002484:	08002835 	.word	0x08002835
 8002488:	20000468 	.word	0x20000468
 800248c:	20000344 	.word	0x20000344
 8002490:	20000010 	.word	0x20000010
 8002494:	20000464 	.word	0x20000464
 8002498:	20000450 	.word	0x20000450
 800249c:	20000448 	.word	0x20000448

080024a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <vTaskSuspendAll+0x18>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <vTaskSuspendAll+0x18>)
 80024ac:	6013      	str	r3, [r2, #0]
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	2000046c 	.word	0x2000046c

080024bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <xTaskResumeAll+0x114>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	603b      	str	r3, [r7, #0]
}
 80024e4:	bf00      	nop
 80024e6:	e7fe      	b.n	80024e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024e8:	f000 fbd8 	bl	8002c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <xTaskResumeAll+0x114>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	4a37      	ldr	r2, [pc, #220]	; (80025d0 <xTaskResumeAll+0x114>)
 80024f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <xTaskResumeAll+0x114>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d161      	bne.n	80025c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024fe:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <xTaskResumeAll+0x118>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d05d      	beq.n	80025c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002506:	e02e      	b.n	8002566 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002508:	4b33      	ldr	r3, [pc, #204]	; (80025d8 <xTaskResumeAll+0x11c>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3318      	adds	r3, #24
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fd5b 	bl	8001fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff fd56 	bl	8001fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <xTaskResumeAll+0x120>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <xTaskResumeAll+0x120>)
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <xTaskResumeAll+0x124>)
 8002544:	441a      	add	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3304      	adds	r3, #4
 800254a:	4619      	mov	r1, r3
 800254c:	4610      	mov	r0, r2
 800254e:	f7ff fce4 	bl	8001f1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <xTaskResumeAll+0x128>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002560:	4b21      	ldr	r3, [pc, #132]	; (80025e8 <xTaskResumeAll+0x12c>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002566:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <xTaskResumeAll+0x11c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1cc      	bne.n	8002508 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002574:	f000 fa18 	bl	80029a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <xTaskResumeAll+0x130>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002584:	f000 f836 	bl	80025f4 <xTaskIncrementTick>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <xTaskResumeAll+0x12c>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f1      	bne.n	8002584 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <xTaskResumeAll+0x130>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <xTaskResumeAll+0x12c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <xTaskResumeAll+0x134>)
 80025b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80025c2:	f000 fb9b 	bl	8002cfc <vPortExitCritical>

	return xAlreadyYielded;
 80025c6:	68bb      	ldr	r3, [r7, #8]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000046c 	.word	0x2000046c
 80025d4:	20000444 	.word	0x20000444
 80025d8:	20000404 	.word	0x20000404
 80025dc:	2000044c 	.word	0x2000044c
 80025e0:	20000348 	.word	0x20000348
 80025e4:	20000344 	.word	0x20000344
 80025e8:	20000458 	.word	0x20000458
 80025ec:	20000454 	.word	0x20000454
 80025f0:	e000ed04 	.word	0xe000ed04

080025f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fe:	4b51      	ldr	r3, [pc, #324]	; (8002744 <xTaskIncrementTick+0x150>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 808d 	bne.w	8002722 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002608:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <xTaskIncrementTick+0x154>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002610:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <xTaskIncrementTick+0x154>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d120      	bne.n	800265e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <xTaskIncrementTick+0x158>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <xTaskIncrementTick+0x48>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	603b      	str	r3, [r7, #0]
}
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <xTaskIncrementTick+0x46>
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <xTaskIncrementTick+0x158>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b43      	ldr	r3, [pc, #268]	; (8002750 <xTaskIncrementTick+0x15c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a41      	ldr	r2, [pc, #260]	; (800274c <xTaskIncrementTick+0x158>)
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4a41      	ldr	r2, [pc, #260]	; (8002750 <xTaskIncrementTick+0x15c>)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <xTaskIncrementTick+0x160>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <xTaskIncrementTick+0x160>)
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	f000 f9a5 	bl	80029a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <xTaskIncrementTick+0x164>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d34d      	bcc.n	8002704 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002668:	4b38      	ldr	r3, [pc, #224]	; (800274c <xTaskIncrementTick+0x158>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <xTaskIncrementTick+0x82>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <xTaskIncrementTick+0x84>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d004      	beq.n	8002686 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <xTaskIncrementTick+0x164>)
 800267e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002682:	601a      	str	r2, [r3, #0]
					break;
 8002684:	e03e      	b.n	8002704 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002686:	4b31      	ldr	r3, [pc, #196]	; (800274c <xTaskIncrementTick+0x158>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	429a      	cmp	r2, r3
 800269c:	d203      	bcs.n	80026a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800269e:	4a2e      	ldr	r2, [pc, #184]	; (8002758 <xTaskIncrementTick+0x164>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6013      	str	r3, [r2, #0]
						break;
 80026a4:	e02e      	b.n	8002704 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	3304      	adds	r3, #4
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fc90 	bl	8001fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	3318      	adds	r3, #24
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fc87 	bl	8001fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	2201      	movs	r2, #1
 80026c8:	409a      	lsls	r2, r3
 80026ca:	4b24      	ldr	r3, [pc, #144]	; (800275c <xTaskIncrementTick+0x168>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	4a22      	ldr	r2, [pc, #136]	; (800275c <xTaskIncrementTick+0x168>)
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4a1f      	ldr	r2, [pc, #124]	; (8002760 <xTaskIncrementTick+0x16c>)
 80026e2:	441a      	add	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3304      	adds	r3, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7ff fc15 	bl	8001f1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <xTaskIncrementTick+0x170>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b4      	bcc.n	8002668 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80026fe:	2301      	movs	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002702:	e7b1      	b.n	8002668 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002704:	4b17      	ldr	r3, [pc, #92]	; (8002764 <xTaskIncrementTick+0x170>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800270a:	4915      	ldr	r1, [pc, #84]	; (8002760 <xTaskIncrementTick+0x16c>)
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d907      	bls.n	800272c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800271c:	2301      	movs	r3, #1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e004      	b.n	800272c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002722:	4b11      	ldr	r3, [pc, #68]	; (8002768 <xTaskIncrementTick+0x174>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <xTaskIncrementTick+0x174>)
 800272a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <xTaskIncrementTick+0x178>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002738:	697b      	ldr	r3, [r7, #20]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	2000046c 	.word	0x2000046c
 8002748:	20000448 	.word	0x20000448
 800274c:	200003fc 	.word	0x200003fc
 8002750:	20000400 	.word	0x20000400
 8002754:	2000045c 	.word	0x2000045c
 8002758:	20000464 	.word	0x20000464
 800275c:	2000044c 	.word	0x2000044c
 8002760:	20000348 	.word	0x20000348
 8002764:	20000344 	.word	0x20000344
 8002768:	20000454 	.word	0x20000454
 800276c:	20000458 	.word	0x20000458

08002770 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002770:	b480      	push	{r7}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <vTaskSwitchContext+0xac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800277e:	4b28      	ldr	r3, [pc, #160]	; (8002820 <vTaskSwitchContext+0xb0>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002784:	e044      	b.n	8002810 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <vTaskSwitchContext+0xb0>)
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <vTaskSwitchContext+0xb4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	fab3 f383 	clz	r3, r3
 8002798:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800279a:	7afb      	ldrb	r3, [r7, #11]
 800279c:	f1c3 031f 	rsb	r3, r3, #31
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	4921      	ldr	r1, [pc, #132]	; (8002828 <vTaskSwitchContext+0xb8>)
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10a      	bne.n	80027cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	607b      	str	r3, [r7, #4]
}
 80027c8:	bf00      	nop
 80027ca:	e7fe      	b.n	80027ca <vTaskSwitchContext+0x5a>
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <vTaskSwitchContext+0xb8>)
 80027d8:	4413      	add	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	3308      	adds	r3, #8
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d104      	bne.n	80027fc <vTaskSwitchContext+0x8c>
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	605a      	str	r2, [r3, #4]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	4a0a      	ldr	r2, [pc, #40]	; (800282c <vTaskSwitchContext+0xbc>)
 8002804:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <vTaskSwitchContext+0xbc>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	334c      	adds	r3, #76	; 0x4c
 800280c:	4a08      	ldr	r2, [pc, #32]	; (8002830 <vTaskSwitchContext+0xc0>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	2000046c 	.word	0x2000046c
 8002820:	20000458 	.word	0x20000458
 8002824:	2000044c 	.word	0x2000044c
 8002828:	20000348 	.word	0x20000348
 800282c:	20000344 	.word	0x20000344
 8002830:	20000010 	.word	0x20000010

08002834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800283c:	f000 f852 	bl	80028e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <prvIdleTask+0x28>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d9f9      	bls.n	800283c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002848:	4b05      	ldr	r3, [pc, #20]	; (8002860 <prvIdleTask+0x2c>)
 800284a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002858:	e7f0      	b.n	800283c <prvIdleTask+0x8>
 800285a:	bf00      	nop
 800285c:	20000348 	.word	0x20000348
 8002860:	e000ed04 	.word	0xe000ed04

08002864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	e00c      	b.n	800288a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <prvInitialiseTaskLists+0x60>)
 800287c:	4413      	add	r3, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fb20 	bl	8001ec4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3301      	adds	r3, #1
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b06      	cmp	r3, #6
 800288e:	d9ef      	bls.n	8002870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <prvInitialiseTaskLists+0x64>)
 8002892:	f7ff fb17 	bl	8001ec4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002896:	480d      	ldr	r0, [pc, #52]	; (80028cc <prvInitialiseTaskLists+0x68>)
 8002898:	f7ff fb14 	bl	8001ec4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <prvInitialiseTaskLists+0x6c>)
 800289e:	f7ff fb11 	bl	8001ec4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028a2:	480c      	ldr	r0, [pc, #48]	; (80028d4 <prvInitialiseTaskLists+0x70>)
 80028a4:	f7ff fb0e 	bl	8001ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <prvInitialiseTaskLists+0x74>)
 80028aa:	f7ff fb0b 	bl	8001ec4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <prvInitialiseTaskLists+0x78>)
 80028b0:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <prvInitialiseTaskLists+0x64>)
 80028b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <prvInitialiseTaskLists+0x7c>)
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <prvInitialiseTaskLists+0x68>)
 80028b8:	601a      	str	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000348 	.word	0x20000348
 80028c8:	200003d4 	.word	0x200003d4
 80028cc:	200003e8 	.word	0x200003e8
 80028d0:	20000404 	.word	0x20000404
 80028d4:	20000418 	.word	0x20000418
 80028d8:	20000430 	.word	0x20000430
 80028dc:	200003fc 	.word	0x200003fc
 80028e0:	20000400 	.word	0x20000400

080028e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028ea:	e019      	b.n	8002920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80028ec:	f000 f9d6 	bl	8002c9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <prvCheckTasksWaitingTermination+0x50>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fb67 	bl	8001fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <prvCheckTasksWaitingTermination+0x54>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3b01      	subs	r3, #1
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <prvCheckTasksWaitingTermination+0x54>)
 800290a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3b01      	subs	r3, #1
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 8002914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002916:	f000 f9f1 	bl	8002cfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f810 	bl	8002940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <prvCheckTasksWaitingTermination+0x58>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e1      	bne.n	80028ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000418 	.word	0x20000418
 8002938:	20000444 	.word	0x20000444
 800293c:	2000042c 	.word	0x2000042c

08002940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	334c      	adds	r3, #76	; 0x4c
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fc7b 	bl	8003248 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb21 	bl	8002fa8 <vPortFree>
				vPortFree( pxTCB );
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fb1e 	bl	8002fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800296c:	e018      	b.n	80029a0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d103      	bne.n	8002980 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb15 	bl	8002fa8 <vPortFree>
	}
 800297e:	e00f      	b.n	80029a0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002986:	2b02      	cmp	r3, #2
 8002988:	d00a      	beq.n	80029a0 <prvDeleteTCB+0x60>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	60fb      	str	r3, [r7, #12]
}
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <prvDeleteTCB+0x5e>
	}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <prvResetNextTaskUnblockTime+0x40>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <prvResetNextTaskUnblockTime+0x14>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <prvResetNextTaskUnblockTime+0x16>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <prvResetNextTaskUnblockTime+0x44>)
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80029ca:	e008      	b.n	80029de <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <prvResetNextTaskUnblockTime+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	4a04      	ldr	r2, [pc, #16]	; (80029ec <prvResetNextTaskUnblockTime+0x44>)
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	200003fc 	.word	0x200003fc
 80029ec:	20000464 	.word	0x20000464

080029f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3304      	adds	r3, #4
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fae2 	bl	8001fd0 <uxListRemove>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1e:	43da      	mvns	r2, r3
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4013      	ands	r3, r2
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a30:	d10a      	bne.n	8002a48 <prvAddCurrentTaskToDelayedList+0x58>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	481a      	ldr	r0, [pc, #104]	; (8002aac <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a42:	f7ff fa6a 	bl	8001f1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002a46:	e026      	b.n	8002a96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a50:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d209      	bcs.n	8002a74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4610      	mov	r0, r2
 8002a6e:	f7ff fa77 	bl	8001f60 <vListInsert>
}
 8002a72:	e010      	b.n	8002a96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7ff fa6d 	bl	8001f60 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d202      	bcs.n	8002a96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6013      	str	r3, [r2, #0]
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000448 	.word	0x20000448
 8002aa4:	20000344 	.word	0x20000344
 8002aa8:	2000044c 	.word	0x2000044c
 8002aac:	20000430 	.word	0x20000430
 8002ab0:	20000400 	.word	0x20000400
 8002ab4:	200003fc 	.word	0x200003fc
 8002ab8:	20000464 	.word	0x20000464

08002abc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b04      	subs	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ad4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3b04      	subs	r3, #4
 8002ada:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f023 0201 	bic.w	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	3b04      	subs	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002aec:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <pxPortInitialiseStack+0x54>)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	3b14      	subs	r3, #20
 8002af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3b20      	subs	r3, #32
 8002b02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002b04:	68fb      	ldr	r3, [r7, #12]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	08002b15 	.word	0x08002b15

08002b14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002b1e:	4b12      	ldr	r3, [pc, #72]	; (8002b68 <prvTaskExitError+0x54>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b26:	d00a      	beq.n	8002b3e <prvTaskExitError+0x2a>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	60fb      	str	r3, [r7, #12]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <prvTaskExitError+0x28>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	60bb      	str	r3, [r7, #8]
}
 8002b50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002b52:	bf00      	nop
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0fc      	beq.n	8002b54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	2000000c 	.word	0x2000000c
 8002b6c:	00000000 	.word	0x00000000

08002b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <pxCurrentTCBConst2>)
 8002b72:	6819      	ldr	r1, [r3, #0]
 8002b74:	6808      	ldr	r0, [r1, #0]
 8002b76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b7a:	f380 8809 	msr	PSP, r0
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f380 8811 	msr	BASEPRI, r0
 8002b8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002b8e:	4770      	bx	lr

08002b90 <pxCurrentTCBConst2>:
 8002b90:	20000344 	.word	0x20000344
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b94:	bf00      	nop
 8002b96:	bf00      	nop

08002b98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <prvPortStartFirstTask+0x1c>)
 8002b9a:	6800      	ldr	r0, [r0, #0]
 8002b9c:	6800      	ldr	r0, [r0, #0]
 8002b9e:	f380 8808 	msr	MSP, r0
 8002ba2:	b662      	cpsie	i
 8002ba4:	b661      	cpsie	f
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	f3bf 8f6f 	isb	sy
 8002bae:	df00      	svc	0
 8002bb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002bb2:	bf00      	nop
 8002bb4:	e000ed08 	.word	0xe000ed08

08002bb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <xPortStartScheduler+0xd0>)
 8002bc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	22ff      	movs	r2, #255	; 0xff
 8002bce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b2a      	ldr	r3, [pc, #168]	; (8002c8c <xPortStartScheduler+0xd4>)
 8002be4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002be6:	4b2a      	ldr	r3, [pc, #168]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002be8:	2207      	movs	r2, #7
 8002bea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002bec:	e009      	b.n	8002c02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	4a26      	ldr	r2, [pc, #152]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002bf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c02:	78fb      	ldrb	r3, [r7, #3]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d0ef      	beq.n	8002bee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f1c3 0307 	rsb	r3, r3, #7
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d00a      	beq.n	8002c30 <xPortStartScheduler+0x78>
	__asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	60bb      	str	r3, [r7, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	e7fe      	b.n	8002c2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002c38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c42:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <xPortStartScheduler+0xd8>)
 8002c44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <xPortStartScheduler+0xdc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a10      	ldr	r2, [pc, #64]	; (8002c94 <xPortStartScheduler+0xdc>)
 8002c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <xPortStartScheduler+0xdc>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <xPortStartScheduler+0xdc>)
 8002c60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002c64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002c66:	f000 f8b9 	bl	8002ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <xPortStartScheduler+0xe0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002c70:	f7ff ff92 	bl	8002b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002c74:	f7ff fd7c 	bl	8002770 <vTaskSwitchContext>
	prvTaskExitError();
 8002c78:	f7ff ff4c 	bl	8002b14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e400 	.word	0xe000e400
 8002c8c:	20000470 	.word	0x20000470
 8002c90:	20000474 	.word	0x20000474
 8002c94:	e000ed20 	.word	0xe000ed20
 8002c98:	2000000c 	.word	0x2000000c

08002c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	607b      	str	r3, [r7, #4]
}
 8002cb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002cb6:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <vPortEnterCritical+0x58>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	; (8002cf4 <vPortEnterCritical+0x58>)
 8002cbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <vPortEnterCritical+0x58>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d10f      	bne.n	8002ce8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <vPortEnterCritical+0x5c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	f383 8811 	msr	BASEPRI, r3
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	f3bf 8f4f 	dsb	sy
 8002ce2:	603b      	str	r3, [r7, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	e7fe      	b.n	8002ce6 <vPortEnterCritical+0x4a>
	}
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	2000000c 	.word	0x2000000c
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <vPortExitCritical+0x4c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <vPortExitCritical+0x24>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	607b      	str	r3, [r7, #4]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <vPortExitCritical+0x4c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <vPortExitCritical+0x4c>)
 8002d28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d2a:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <vPortExitCritical+0x4c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d105      	bne.n	8002d3e <vPortExitCritical+0x42>
 8002d32:	2300      	movs	r3, #0
 8002d34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	2000000c 	.word	0x2000000c
 8002d4c:	00000000 	.word	0x00000000

08002d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002d50:	f3ef 8009 	mrs	r0, PSP
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <pxCurrentTCBConst>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d60:	6010      	str	r0, [r2, #0]
 8002d62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002d66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d6a:	f380 8811 	msr	BASEPRI, r0
 8002d6e:	f7ff fcff 	bl	8002770 <vTaskSwitchContext>
 8002d72:	f04f 0000 	mov.w	r0, #0
 8002d76:	f380 8811 	msr	BASEPRI, r0
 8002d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	6808      	ldr	r0, [r1, #0]
 8002d82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002d86:	f380 8809 	msr	PSP, r0
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	4770      	bx	lr

08002d90 <pxCurrentTCBConst>:
 8002d90:	20000344 	.word	0x20000344
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop

08002d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da2:	f383 8811 	msr	BASEPRI, r3
 8002da6:	f3bf 8f6f 	isb	sy
 8002daa:	f3bf 8f4f 	dsb	sy
 8002dae:	607b      	str	r3, [r7, #4]
}
 8002db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002db2:	f7ff fc1f 	bl	80025f4 <xTaskIncrementTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <SysTick_Handler+0x40>)
 8002dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f383 8811 	msr	BASEPRI, r3
}
 8002dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	e000ed04 	.word	0xe000ed04

08002ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <vPortSetupTimerInterrupt+0x30>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <vPortSetupTimerInterrupt+0x34>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002dec:	4b09      	ldr	r3, [pc, #36]	; (8002e14 <vPortSetupTimerInterrupt+0x38>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <vPortSetupTimerInterrupt+0x3c>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <vPortSetupTimerInterrupt+0x40>)
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002dfe:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <vPortSetupTimerInterrupt+0x30>)
 8002e00:	2207      	movs	r2, #7
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e010 	.word	0xe000e010
 8002e10:	e000e018 	.word	0xe000e018
 8002e14:	20000000 	.word	0x20000000
 8002e18:	10624dd3 	.word	0x10624dd3
 8002e1c:	e000e014 	.word	0xe000e014

08002e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e2c:	f7ff fb38 	bl	80024a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e30:	4b58      	ldr	r3, [pc, #352]	; (8002f94 <pvPortMalloc+0x174>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e38:	f000 f910 	bl	800305c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e3c:	4b56      	ldr	r3, [pc, #344]	; (8002f98 <pvPortMalloc+0x178>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 808e 	bne.w	8002f66 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01d      	beq.n	8002e8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002e50:	2208      	movs	r2, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f023 0307 	bic.w	r3, r3, #7
 8002e68:	3308      	adds	r3, #8
 8002e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <pvPortMalloc+0x6c>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	617b      	str	r3, [r7, #20]
}
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d069      	beq.n	8002f66 <pvPortMalloc+0x146>
 8002e92:	4b42      	ldr	r3, [pc, #264]	; (8002f9c <pvPortMalloc+0x17c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d864      	bhi.n	8002f66 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <pvPortMalloc+0x180>)
 8002e9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ea0:	4b3f      	ldr	r3, [pc, #252]	; (8002fa0 <pvPortMalloc+0x180>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea6:	e004      	b.n	8002eb2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d903      	bls.n	8002ec4 <pvPortMalloc+0xa4>
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f1      	bne.n	8002ea8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <pvPortMalloc+0x174>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d04b      	beq.n	8002f66 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	4413      	add	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad2      	subs	r2, r2, r3
 8002ee8:	2308      	movs	r3, #8
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d91f      	bls.n	8002f30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <pvPortMalloc+0xf8>
	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	613b      	str	r3, [r7, #16]
}
 8002f14:	bf00      	nop
 8002f16:	e7fe      	b.n	8002f16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	1ad2      	subs	r2, r2, r3
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f2a:	69b8      	ldr	r0, [r7, #24]
 8002f2c:	f000 f8f8 	bl	8003120 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f30:	4b1a      	ldr	r3, [pc, #104]	; (8002f9c <pvPortMalloc+0x17c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	4a18      	ldr	r2, [pc, #96]	; (8002f9c <pvPortMalloc+0x17c>)
 8002f3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f3e:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <pvPortMalloc+0x17c>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <pvPortMalloc+0x184>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d203      	bcs.n	8002f52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <pvPortMalloc+0x17c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a15      	ldr	r2, [pc, #84]	; (8002fa4 <pvPortMalloc+0x184>)
 8002f50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <pvPortMalloc+0x178>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f66:	f7ff faa9 	bl	80024bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <pvPortMalloc+0x16a>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	60fb      	str	r3, [r7, #12]
}
 8002f86:	bf00      	nop
 8002f88:	e7fe      	b.n	8002f88 <pvPortMalloc+0x168>
	return pvReturn;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3728      	adds	r7, #40	; 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20001480 	.word	0x20001480
 8002f98:	2000148c 	.word	0x2000148c
 8002f9c:	20001484 	.word	0x20001484
 8002fa0:	20001478 	.word	0x20001478
 8002fa4:	20001488 	.word	0x20001488

08002fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d048      	beq.n	800304c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002fba:	2308      	movs	r3, #8
 8002fbc:	425b      	negs	r3, r3
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4b21      	ldr	r3, [pc, #132]	; (8003054 <vPortFree+0xac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <vPortFree+0x44>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	60fb      	str	r3, [r7, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <vPortFree+0x62>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	60bb      	str	r3, [r7, #8]
}
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <vPortFree+0xac>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4013      	ands	r3, r2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d019      	beq.n	800304c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d115      	bne.n	800304c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <vPortFree+0xac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003030:	f7ff fa36 	bl	80024a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4b07      	ldr	r3, [pc, #28]	; (8003058 <vPortFree+0xb0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4413      	add	r3, r2
 800303e:	4a06      	ldr	r2, [pc, #24]	; (8003058 <vPortFree+0xb0>)
 8003040:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003042:	6938      	ldr	r0, [r7, #16]
 8003044:	f000 f86c 	bl	8003120 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003048:	f7ff fa38 	bl	80024bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800304c:	bf00      	nop
 800304e:	3718      	adds	r7, #24
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2000148c 	.word	0x2000148c
 8003058:	20001484 	.word	0x20001484

0800305c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003066:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003068:	4b27      	ldr	r3, [pc, #156]	; (8003108 <prvHeapInit+0xac>)
 800306a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3307      	adds	r3, #7
 800307a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0307 	bic.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <prvHeapInit+0xac>)
 800308c:	4413      	add	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003094:	4a1d      	ldr	r2, [pc, #116]	; (800310c <prvHeapInit+0xb0>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800309a:	4b1c      	ldr	r3, [pc, #112]	; (800310c <prvHeapInit+0xb0>)
 800309c:	2200      	movs	r2, #0
 800309e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030a8:	2208      	movs	r2, #8
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0307 	bic.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4a15      	ldr	r2, [pc, #84]	; (8003110 <prvHeapInit+0xb4>)
 80030bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <prvHeapInit+0xb4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2200      	movs	r2, #0
 80030c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <prvHeapInit+0xb4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	1ad2      	subs	r2, r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030dc:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <prvHeapInit+0xb4>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <prvHeapInit+0xb8>)
 80030ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	4a09      	ldr	r2, [pc, #36]	; (8003118 <prvHeapInit+0xbc>)
 80030f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <prvHeapInit+0xc0>)
 80030f6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80030fa:	601a      	str	r2, [r3, #0]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000478 	.word	0x20000478
 800310c:	20001478 	.word	0x20001478
 8003110:	20001480 	.word	0x20001480
 8003114:	20001488 	.word	0x20001488
 8003118:	20001484 	.word	0x20001484
 800311c:	2000148c 	.word	0x2000148c

08003120 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003128:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <prvInsertBlockIntoFreeList+0xa8>)
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e002      	b.n	8003134 <prvInsertBlockIntoFreeList+0x14>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	429a      	cmp	r2, r3
 800313c:	d8f7      	bhi.n	800312e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d108      	bne.n	8003162 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	441a      	add	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	441a      	add	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d118      	bne.n	80031a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <prvInsertBlockIntoFreeList+0xac>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d00d      	beq.n	800319e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	441a      	add	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e008      	b.n	80031b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <prvInsertBlockIntoFreeList+0xac>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	e003      	b.n	80031b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d002      	beq.n	80031be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	20001478 	.word	0x20001478
 80031cc:	20001480 	.word	0x20001480

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	2600      	movs	r6, #0
 80031d4:	4d0c      	ldr	r5, [pc, #48]	; (8003208 <__libc_init_array+0x38>)
 80031d6:	4c0d      	ldr	r4, [pc, #52]	; (800320c <__libc_init_array+0x3c>)
 80031d8:	1b64      	subs	r4, r4, r5
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	f000 f8e6 	bl	80033b0 <_init>
 80031e4:	2600      	movs	r6, #0
 80031e6:	4d0a      	ldr	r5, [pc, #40]	; (8003210 <__libc_init_array+0x40>)
 80031e8:	4c0a      	ldr	r4, [pc, #40]	; (8003214 <__libc_init_array+0x44>)
 80031ea:	1b64      	subs	r4, r4, r5
 80031ec:	10a4      	asrs	r4, r4, #2
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	080034c0 	.word	0x080034c0
 800320c:	080034c0 	.word	0x080034c0
 8003210:	080034c0 	.word	0x080034c0
 8003214:	080034c4 	.word	0x080034c4

08003218 <__retarget_lock_acquire_recursive>:
 8003218:	4770      	bx	lr

0800321a <__retarget_lock_release_recursive>:
 800321a:	4770      	bx	lr

0800321c <memset>:
 800321c:	4603      	mov	r3, r0
 800321e:	4402      	add	r2, r0
 8003220:	4293      	cmp	r3, r2
 8003222:	d100      	bne.n	8003226 <memset+0xa>
 8003224:	4770      	bx	lr
 8003226:	f803 1b01 	strb.w	r1, [r3], #1
 800322a:	e7f9      	b.n	8003220 <memset+0x4>

0800322c <cleanup_glue>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	460c      	mov	r4, r1
 8003230:	6809      	ldr	r1, [r1, #0]
 8003232:	4605      	mov	r5, r0
 8003234:	b109      	cbz	r1, 800323a <cleanup_glue+0xe>
 8003236:	f7ff fff9 	bl	800322c <cleanup_glue>
 800323a:	4621      	mov	r1, r4
 800323c:	4628      	mov	r0, r5
 800323e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003242:	f000 b869 	b.w	8003318 <_free_r>
	...

08003248 <_reclaim_reent>:
 8003248:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <_reclaim_reent+0xb4>)
 800324a:	b570      	push	{r4, r5, r6, lr}
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4604      	mov	r4, r0
 8003250:	4283      	cmp	r3, r0
 8003252:	d051      	beq.n	80032f8 <_reclaim_reent+0xb0>
 8003254:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003256:	b143      	cbz	r3, 800326a <_reclaim_reent+0x22>
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d14a      	bne.n	80032f4 <_reclaim_reent+0xac>
 800325e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003260:	6819      	ldr	r1, [r3, #0]
 8003262:	b111      	cbz	r1, 800326a <_reclaim_reent+0x22>
 8003264:	4620      	mov	r0, r4
 8003266:	f000 f857 	bl	8003318 <_free_r>
 800326a:	6961      	ldr	r1, [r4, #20]
 800326c:	b111      	cbz	r1, 8003274 <_reclaim_reent+0x2c>
 800326e:	4620      	mov	r0, r4
 8003270:	f000 f852 	bl	8003318 <_free_r>
 8003274:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003276:	b111      	cbz	r1, 800327e <_reclaim_reent+0x36>
 8003278:	4620      	mov	r0, r4
 800327a:	f000 f84d 	bl	8003318 <_free_r>
 800327e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003280:	b111      	cbz	r1, 8003288 <_reclaim_reent+0x40>
 8003282:	4620      	mov	r0, r4
 8003284:	f000 f848 	bl	8003318 <_free_r>
 8003288:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800328a:	b111      	cbz	r1, 8003292 <_reclaim_reent+0x4a>
 800328c:	4620      	mov	r0, r4
 800328e:	f000 f843 	bl	8003318 <_free_r>
 8003292:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003294:	b111      	cbz	r1, 800329c <_reclaim_reent+0x54>
 8003296:	4620      	mov	r0, r4
 8003298:	f000 f83e 	bl	8003318 <_free_r>
 800329c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800329e:	b111      	cbz	r1, 80032a6 <_reclaim_reent+0x5e>
 80032a0:	4620      	mov	r0, r4
 80032a2:	f000 f839 	bl	8003318 <_free_r>
 80032a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80032a8:	b111      	cbz	r1, 80032b0 <_reclaim_reent+0x68>
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 f834 	bl	8003318 <_free_r>
 80032b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032b2:	b111      	cbz	r1, 80032ba <_reclaim_reent+0x72>
 80032b4:	4620      	mov	r0, r4
 80032b6:	f000 f82f 	bl	8003318 <_free_r>
 80032ba:	69a3      	ldr	r3, [r4, #24]
 80032bc:	b1e3      	cbz	r3, 80032f8 <_reclaim_reent+0xb0>
 80032be:	4620      	mov	r0, r4
 80032c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80032c2:	4798      	blx	r3
 80032c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80032c6:	b1b9      	cbz	r1, 80032f8 <_reclaim_reent+0xb0>
 80032c8:	4620      	mov	r0, r4
 80032ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80032ce:	f7ff bfad 	b.w	800322c <cleanup_glue>
 80032d2:	5949      	ldr	r1, [r1, r5]
 80032d4:	b941      	cbnz	r1, 80032e8 <_reclaim_reent+0xa0>
 80032d6:	3504      	adds	r5, #4
 80032d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032da:	2d80      	cmp	r5, #128	; 0x80
 80032dc:	68d9      	ldr	r1, [r3, #12]
 80032de:	d1f8      	bne.n	80032d2 <_reclaim_reent+0x8a>
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 f819 	bl	8003318 <_free_r>
 80032e6:	e7ba      	b.n	800325e <_reclaim_reent+0x16>
 80032e8:	680e      	ldr	r6, [r1, #0]
 80032ea:	4620      	mov	r0, r4
 80032ec:	f000 f814 	bl	8003318 <_free_r>
 80032f0:	4631      	mov	r1, r6
 80032f2:	e7ef      	b.n	80032d4 <_reclaim_reent+0x8c>
 80032f4:	2500      	movs	r5, #0
 80032f6:	e7ef      	b.n	80032d8 <_reclaim_reent+0x90>
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	bf00      	nop
 80032fc:	20000010 	.word	0x20000010

08003300 <__malloc_lock>:
 8003300:	4801      	ldr	r0, [pc, #4]	; (8003308 <__malloc_lock+0x8>)
 8003302:	f7ff bf89 	b.w	8003218 <__retarget_lock_acquire_recursive>
 8003306:	bf00      	nop
 8003308:	200014f0 	.word	0x200014f0

0800330c <__malloc_unlock>:
 800330c:	4801      	ldr	r0, [pc, #4]	; (8003314 <__malloc_unlock+0x8>)
 800330e:	f7ff bf84 	b.w	800321a <__retarget_lock_release_recursive>
 8003312:	bf00      	nop
 8003314:	200014f0 	.word	0x200014f0

08003318 <_free_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	2900      	cmp	r1, #0
 800331e:	d043      	beq.n	80033a8 <_free_r+0x90>
 8003320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003324:	1f0c      	subs	r4, r1, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	bfb8      	it	lt
 800332a:	18e4      	addlt	r4, r4, r3
 800332c:	f7ff ffe8 	bl	8003300 <__malloc_lock>
 8003330:	4a1e      	ldr	r2, [pc, #120]	; (80033ac <_free_r+0x94>)
 8003332:	6813      	ldr	r3, [r2, #0]
 8003334:	4610      	mov	r0, r2
 8003336:	b933      	cbnz	r3, 8003346 <_free_r+0x2e>
 8003338:	6063      	str	r3, [r4, #4]
 800333a:	6014      	str	r4, [r2, #0]
 800333c:	4628      	mov	r0, r5
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003342:	f7ff bfe3 	b.w	800330c <__malloc_unlock>
 8003346:	42a3      	cmp	r3, r4
 8003348:	d90a      	bls.n	8003360 <_free_r+0x48>
 800334a:	6821      	ldr	r1, [r4, #0]
 800334c:	1862      	adds	r2, r4, r1
 800334e:	4293      	cmp	r3, r2
 8003350:	bf01      	itttt	eq
 8003352:	681a      	ldreq	r2, [r3, #0]
 8003354:	685b      	ldreq	r3, [r3, #4]
 8003356:	1852      	addeq	r2, r2, r1
 8003358:	6022      	streq	r2, [r4, #0]
 800335a:	6063      	str	r3, [r4, #4]
 800335c:	6004      	str	r4, [r0, #0]
 800335e:	e7ed      	b.n	800333c <_free_r+0x24>
 8003360:	461a      	mov	r2, r3
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b10b      	cbz	r3, 800336a <_free_r+0x52>
 8003366:	42a3      	cmp	r3, r4
 8003368:	d9fa      	bls.n	8003360 <_free_r+0x48>
 800336a:	6811      	ldr	r1, [r2, #0]
 800336c:	1850      	adds	r0, r2, r1
 800336e:	42a0      	cmp	r0, r4
 8003370:	d10b      	bne.n	800338a <_free_r+0x72>
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	4401      	add	r1, r0
 8003376:	1850      	adds	r0, r2, r1
 8003378:	4283      	cmp	r3, r0
 800337a:	6011      	str	r1, [r2, #0]
 800337c:	d1de      	bne.n	800333c <_free_r+0x24>
 800337e:	6818      	ldr	r0, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4401      	add	r1, r0
 8003384:	6011      	str	r1, [r2, #0]
 8003386:	6053      	str	r3, [r2, #4]
 8003388:	e7d8      	b.n	800333c <_free_r+0x24>
 800338a:	d902      	bls.n	8003392 <_free_r+0x7a>
 800338c:	230c      	movs	r3, #12
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	e7d4      	b.n	800333c <_free_r+0x24>
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	1821      	adds	r1, r4, r0
 8003396:	428b      	cmp	r3, r1
 8003398:	bf01      	itttt	eq
 800339a:	6819      	ldreq	r1, [r3, #0]
 800339c:	685b      	ldreq	r3, [r3, #4]
 800339e:	1809      	addeq	r1, r1, r0
 80033a0:	6021      	streq	r1, [r4, #0]
 80033a2:	6063      	str	r3, [r4, #4]
 80033a4:	6054      	str	r4, [r2, #4]
 80033a6:	e7c9      	b.n	800333c <_free_r+0x24>
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
 80033aa:	bf00      	nop
 80033ac:	20001490 	.word	0x20001490

080033b0 <_init>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr

080033bc <_fini>:
 80033bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033be:	bf00      	nop
 80033c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c2:	bc08      	pop	{r3}
 80033c4:	469e      	mov	lr, r3
 80033c6:	4770      	bx	lr
